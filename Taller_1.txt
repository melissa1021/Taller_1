Taller # 1


2. Escriba los 4 principios de diseño de hardware aprendidos en clase.

a. La simplicidad favorece la regularidad
b. Entre mas pequeño mas rapido
c. Hacer el caso comun mas rapido
d. Buenos diseños demandan grandes compromisos

3. Convertir a instrucciones de bajo nivel.

int x=0; 
int y =8; 
int z = 1; 

y=x+3;
z=z+3;
x=(x-z)+(3+y);

Solución

X -> %L0
Y -> %L1
Z -> %L2

ADD %G0, 0, %L0
ADD %G0, 8, %L1
ADD %G0, 1, %L2

ADD %L0, 3, %L1
ADD %L2, 3, %L2

SUB %L0, %L2, %L0
ADD %L1, 3, %L1
ADD %L0, %L1, %L0

4. Usar el ld, y st.

a. a[4]= a[2]+x;

Solucion

a -> %L0
x -> %L1

LD %L0, 2*4, %L2
ADD %L1, %L2,  %L1
ST %L1, %L0, 4*4

b. y[0] = y[40]+13;

Solucion

y -> %L0

LD %L0, 40*4, %L1
ADD %L1, 1,  %L1
ST %L1, %L0, 0*4

5. Convertir a lenguaje de maquina.

a.
int main(){
	
	int i =3; p=2;
	return i+3;
}

Solucion

i -> %L0
p -> %L1

ADD %G0, 3, %L0
ADD %G0, 2, %L1
ADD %L0, 3, %O0

b.
int main(){
	int p=3; x=1; z=4;
	int w=0; 
	w=(p+40)+(x-z);
	return 0; 
}

Solucion

p -> %L0
x -> %L1
z -> %L2
w -> %L3

ADD %G0, 3 %L0
ADD %GO, 1, %L1
ADD %GO, 4, %L1
ADD %GO, 0, %L3

ADD %L0, 40, %L0
SUB %L1, %L2, %L1
ADD %L0, %L1, %L3
ADD %G0, 0, O0

6. Inicializar las siguientes variables negativas usando OR.

a. n=-12

Solucion

OR %G0, -12, %L0
OR %G0, %L0, %O0

b. a=-11

Solucion

OR %G0, -11, %L1
OR %G0, %L1, %O1

c. b=-14

Solucion

OR %G0, -14, %L2
OR %G0, %L2, %O2
